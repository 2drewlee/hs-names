#!/usr/bin/env node

'use strict';

const assert = require('assert');
const Path = require('path');
const fs = require('bfile');
const bio = require('bufio');
const Resource = require('hskd/lib/dns/resource');

const ZONE_JSON = Path.resolve(__dirname, 'build', 'root.json');
const TLD_H = Path.resolve(__dirname, 'build', 'tld.h');
const TLD_JS = Path.resolve(__dirname, 'build', 'tld.js');

function compare(a, b) {
  const len = Math.min(a.length, b.length);

  for (let i = 0; i < len; i++) {
    const x = a.charCodeAt(i);
    const y = b.charCodeAt(i);

    if (x < y)
      return -1;

    if (x > y)
      return 1;
  }

  if (a.length < b.length)
    return -1;

  if (a.length > b.length)
    return 1;

  return 0;
}

function prepend(data) {
  assert(data.length <= 512);

  const bw = bio.write(2 + data.length);
  bw.writeU16(data.length);
  bw.writeBytes(data);

  return bw.render();
}

function toHex(data) {
  const hex = prepend(data).toString('hex');
  const chunks = [];

  for (let i = 0; i < hex.length; i += 26)
    chunks.push(`  "${hex.slice(i, i + 26)}"`);

  const str = chunks.join('\n');
  const cstr = str.replace(/([a-f0-9]{2})/g, '\\x$1');

  return `${cstr},`;
}

function toBase64(data) {
  const b64 = data.toString('base64');
  const chunks = [`''`];

  for (let i = 0; i < b64.length; i += 52)
    chunks.push(`    + '${b64.slice(i, i + 52)}'`);

  const str = chunks.join('\n');

  return `${str},`;
}

const json = fs.readFileSync(ZONE_JSON, 'utf8');
const root = JSON.parse(json);
const keys = Object.keys(root).sort(compare);
const items = [];

for (const key of keys) {
  const res = Resource.fromJSON(root[key]);
  const data = res.encode();

  items.push([key.slice(0, -1), data]);
}

{
  const code = [
    '#ifndef _HSK_TLD_H',
    '#define _HSK_TLD_H',
    '',
    '// Autogenerated, do not edit.',
    '',
    'static const char *HSK_TLD_NAMES[] = {'
  ];

  for (const [name] of items)
    code.push(`  "${name}",`);

  code.push('  NULL');
  code.push('};');
  code.push('');
  code.push('static const char *HSK_TLD_DATA[] = {');

  for (const [, data] of items)
    code.push(toHex(data));

  code.push('  NULL');
  code.push('};');
  code.push('');
  code.push(`#define HSK_TLD_SIZE ${keys.length}`);
  code.push('');
  code.push('#endif');
  code.push('');

  const file = Path.resolve(__dirname, 'build', 'tld.h');

  fs.writeFileSync(TLD_H, code.join('\n'));
}

{
  const code = [
    `'use strict'`,
    '',
    '// Autogenerated, do not edit.',
    '',
    'module.exports = {'
  ];

  for (const [name, data] of items)
    code.push(`  '${name}': ${toBase64(data)}`);

  code[code.length - 1] = code[code.length - 1].slice(0, -1);
  code.push('};');
  code.push('');

  fs.writeFileSync(TLD_JS, code.join('\n'));
}
